@page "/"
@inject MegaWeb.Client.Services.Interfaces.IFuncaoService funcaoService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@using MegaWeb.Shared.Response

<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
    <strong>Relação de Funções</strong>
</div>

<p>
    <a href="/addfuncao" class="btn btn-primary btn-sm active" role="button" aria-pressed="true">+ Adicionar</a>
</p>

@if (funcoes == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Descrição</th>
                <th>Opções</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var funcao in funcoes)
            {
                <tr>
                    <td>@funcao.Id</td>
                    <td>@funcao.Descricao</td>
                    <td>
                        <a href="/editfuncao/@funcao.Id" class="btn btn-info" role="button" aria-pressed="true">Editar</a>
                        <a href="#" class="btn btn-danger" role="button" aria-pressed="true" @onclick="async () => await Delete(funcao.Id)">Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    List<FuncaoResponse> funcoes;
    FuncaoResponse funcao = new FuncaoResponse();

    protected override async Task OnInitializedAsync()
    {
        funcoes = await funcaoService.GetAll();
    }

    public async Task Delete(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja deletar?");

        if (confirmed is false)
            return;

        var funcao = await funcaoService.GetById(id);

        await funcaoService.Delete(funcao.Id);

        funcoes = await funcaoService.GetAll();
        StateHasChanged();
    }
}